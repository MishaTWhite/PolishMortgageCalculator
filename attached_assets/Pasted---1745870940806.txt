Спасибо за очень детальное описание текущей архитектуры!

Вижу, что вы действительно хорошо подошли к вопросу имитации браузерного поведения. Проблема, с которой вы столкнулись, в принципе закономерна:
Otodom использует динамическую генерацию контента через JavaScript (особенно для подгрузки следующих страниц результатов) и на некоторых страницах также применяет проверки через систему антибот-защиты (например, проверку выполнения скриптов или наличие определённых куки).

Поэтому предлагаю реалистичный план для решения:

1. Переход на Playwright или Puppeteer
Вам нужно использовать настоящий браузер (headless Chrome через Playwright или Puppeteer). Это позволит:

Проходить все проверки JavaScript (а не просто загружать сырой HTML).

Получать корректную пагинацию (на Otodom пагинация работает через динамическую подгрузку!).

Извлекать все данные как реальный пользователь без блокировок.

Например, на Playwright это выглядело бы так:

javascript
Copy
Edit
const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();
  await page.goto('https://www.otodom.pl/pl/oferty/sprzedaz/mieszkanie/wroclaw', { waitUntil: 'networkidle' });

  const listings = await page.$$eval('article', articles => {
    return articles.map(article => {
      return {
        title: article.innerText,
        url: article.querySelector('a')?.href
      }
    });
  });

  console.log(listings);

  await browser.close();
})();
Можно также автоматизировать прокликивание кнопок "следующая страница" (button[data-cy="pagination.next-page"]) для полной пагинации.

2. Лёгкий вариант: Промежуточный API
Альтернативно: создать скрипт, который запускается локально на Playwright/Puppeteer, собирает весь HTML-ответ, сохраняет его в файл, а потом парсить его вашим старым парсером на Axios + Cheerio.
Это избавит вас от необходимости переписывать парсинг.

3. Если нужен "чистый HTTP-способ" (без браузера)
Это сложнее и менее надёжно, но теоретически можно:

Перехватывать все необходимые заголовки, токены (csrf, auth), куки.

Моделировать полную сессию входа пользователя.

Отправлять правильные параметры AJAX-запросов к бекенду Otodom (они отдают JSON с данными недвижимости, если правильно эмулировать запросы).

Но этот путь в 5-10 раз сложнее и постоянно ломается при малейших изменениях на сайте.

Итог: Самый надёжный и быстрой путь: использовать Playwright или Puppeteer, собирать все данные через полноценный браузер.
Это даст 100% прохождение защиты Otodom и стабильную работу.

Если хотите, могу также помочь написать пример полной пагинации через Playwright специально для Otodom.pl!
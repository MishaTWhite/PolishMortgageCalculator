Финальное ТЗ на доработку Playwright скрапера
Основная цель:
Перевести проект на единую архитектуру Playwright скрапера, с надёжным контролем очереди, корректной обработкой данных и прозрачным для пользователя процессом.

Задачи:
1. Удаление старого HTTP-скрапера
Полностью удалить код, относящийся к старому HTTP-скраперу (модули, роуты, API).

Все операции по сбору данных должны идти через Playwright.

2. Исправления в обработке объявлений
Объявления с "Zapytaj o cenę" игнорировать при сборе данных (не включать в расчёты средних цен, не сохранять).

Перед вычислением средней цены и цены за метр проверять наличие валидных данных.

3. Корректная обработка цен
Перед сохранением данных:

Проверять цену на разумность (например, 50 000–10 000 000 zł).

Игнорировать или логировать аномальные значения.

Перевести поля цен в БД на тип decimal/numeric вместо integer.

4. Очередь задач
Очистка/обновление taskQueue.json:

При новом запуске не создавать дублирующие задачи.

Если задачи уже есть в очереди — продолжить их выполнение.

Реализовать корректное обновление статусов задач:

pending → in_progress → completed/failed.

Сохранять прогресс после каждой обработанной задачи.

5. Управление процессом
Добавить API-метод /api/property-prices/stop-scraping:

При его вызове аккуратно завершать текущую задачу и ставить процесс скрапинга на паузу.

Позже будет добавлена кнопка "Pause" (не в этой задаче).

6. Промежуточные результаты
Реализовать сохранение промежуточных данных:

Сохранять данные после выполнения каждой задачи.

При аварийной остановке отображать частичный собранный результат.

7. Отчёты и логирование
Добавить логирование:

Какие задачи стартовали/завершились.

Какие упали с ошибкой.

В интерфейсе отобразить:

Выполненные задачи

Ошибочные задачи с кратким описанием ошибки.

8. Фронтенд / UI изменения
В интерфейсе Playwright скрапера:

Показывать реальный прогресс по задачам.

Реализовать явную кнопку "Clear Queue" для очистки очереди вручную.

Выводить количество успешных и упавших задач.

9. Режим работы
Браузер всегда работать в headless-режиме (как сейчас).

Старт скрапинга всегда через новый Playwright-скрапер.

Пока автообновления по расписанию не внедрять — запустим позже после стабильной работы.

Примечания:
Для экономии времени использовать максимально существующий код и улучшать его.

Минимизировать изменения, которые не критичны для первой рабочей версии.

После выполнения ТЗ — провести тестирование на одной средней по размеру выборке.

Проверочные требования для приёма задачи:
Очередь задач корректно отражает прогресс после запуска.

Сохраняются только валидные объявления.

Ошибочные задачи отображаются отдельно в интерфейсе.

Можно остановить процесс через API.

Нет ошибок при сохранении данных в базу данных.

Нет экспоненциальных или мусорных значений в БД.
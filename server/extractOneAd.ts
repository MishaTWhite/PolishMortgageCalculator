/**
 * Extract One Ad
 * 
 * Сверхлегкая версия скрапера, фокусирующаяся на извлечении данных
 * из одного объявления с максимальной скоростью выполнения.
 */

import * as fs from 'fs';
import * as path from 'path';
import { chromium } from 'playwright';

// Константы
const MAX_RUNTIME = 25000; // 25 секунд максимум
const COOKIES_FILE = './attached_assets/Pasted-1-Cookie-cooki-1745927642029.txt';
// Тестовое объявление - трехкомнатная квартира в районе Средместье
const TARGET_URL = 'https://www.otodom.pl/pl/oferty/sprzedaz/mieszkanie/warszawa/srodmiescie?roomsNumber=%5BTHREE%5D';
const RESULTS_DIR = './scraper_results';

// Создаем директорию для результатов, если она не существует
if (!fs.existsSync(RESULTS_DIR)) {
  fs.mkdirSync(RESULTS_DIR, { recursive: true });
}

/**
 * Основная функция скрапера
 */
async function extractOneAd() {
  console.log('=== STARTING EXTRACT ONE AD ===');
  
  const startTime = Date.now();
  const timeoutId = setTimeout(() => {
    console.log('MAX RUNTIME REACHED! Exiting process...');
    process.exit(1);
  }, MAX_RUNTIME);
  
  try {
    // 1. Загружаем данные сессии
    console.log('Loading cookies from file...');
    const sessionData = JSON.parse(fs.readFileSync(COOKIES_FILE, 'utf-8'));
    console.log(`Loaded ${sessionData.cookies.length} cookies`);
    
    // 2. Запускаем браузер с минимальными настройками
    console.log('Launching browser...');
    const browser = await chromium.launch({
      headless: true,
      executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',
      args: ['--no-sandbox', '--disable-dev-shm-usage', '--disable-setuid-sandbox']
    });
    
    // 3. Создаем контекст и устанавливаем куки
    console.log('Creating context and setting cookies...');
    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
      locale: 'pl-PL'
    });
    await context.addCookies(sessionData.cookies);
    
    // 4. Создаем страницу и устанавливаем localStorage
    console.log('Creating page and setting localStorage...');
    const page = await context.newPage();
    
    // Подготавливаем localStorage скрипт
    await page.addInitScript(`() => {
      const storage = ${JSON.stringify(sessionData.localStorage)};
      for (const [key, value] of Object.entries(storage)) {
        if (value) localStorage.setItem(key, value);
      }
    }`);
    
    // 5. Переходим по URL и ждем загрузки страницы
    console.log(`Navigating to ${TARGET_URL}...`);
    const response = await page.goto(TARGET_URL, {
      waitUntil: 'domcontentloaded',
      timeout: 15000
    });
    
    // Быстрая проверка на CloudFront блокировку
    console.log(`Page loaded with status: ${response?.status()}`);
    const title = await page.title();
    console.log(`Page title: ${title}`);
    
    const html = await page.content();
    const isBlocked = html.includes('ERROR: The request could not be satisfied') || 
                      html.includes('Generated by cloudfront');
    
    if (isBlocked) {
      console.log('BLOCKED: CloudFront protection detected!');
      
      // Сохраняем информацию о блокировке
      const resultsFile = path.join(RESULTS_DIR, `extract_one_ad_blocked_${Date.now()}.json`);
      fs.writeFileSync(resultsFile, JSON.stringify({
        status: 'blocked',
        url: TARGET_URL,
        timestamp: new Date().toISOString()
      }));
      
      console.log(`Results saved to: ${resultsFile}`);
      return;
    }
    
    // 6. Установка localStorage после навигации
    await page.evaluate((storageItems) => {
      for (const [key, value] of Object.entries(storageItems)) {
        if (value !== null) localStorage.setItem(key, value);
      }
    }, sessionData.localStorage);
    
    // 7. Извлекаем данные о первом объявлении
    console.log('Extracting data from first listing...');
    const data = await page.evaluate(() => {
      // Вспомогательные функции
      const cleanPrice = (str: string | null | undefined): number => {
        const cleaned = str?.replace(/[^\d]/g, '');
        return cleaned ? parseInt(cleaned) : 0;
      };
      
      const cleanArea = (str: string | null | undefined): number => {
        const cleaned = str?.replace(/[^\d.,]/g, '').replace(',', '.');
        return cleaned ? parseFloat(cleaned) : 0;
      };
      
      // Находим первое объявление
      const article = document.querySelector('article');
      if (!article) return { found: false };
      
      // Извлекаем данные
      let titleElement = article.querySelector('h3') || article.querySelector('[data-cy="listing-item-title"]');
      let priceElement = article.querySelector('[data-cy="listing-item-price"]') || article.querySelector('.css-s8lxhp');
      let areaElement = article.querySelector('[data-cy="listing-item-area"]') || article.querySelector('span[aria-label*="area"]');
      let addressElement = article.querySelector('[data-cy="listing-item-address"]') || article.querySelector('p');
      let linkElement = article.querySelector('a') as HTMLAnchorElement;
      
      // Извлекаем и форматируем данные
      const title = titleElement?.textContent?.trim() || '';
      const priceText = priceElement?.textContent?.trim() || '';
      const areaText = areaElement?.textContent?.trim() || '';
      const address = addressElement?.textContent?.trim() || '';
      const url = linkElement?.href || '';
      
      // Преобразуем в числа
      const priceValue = cleanPrice(priceText);
      const areaValue = cleanArea(areaText);
      
      // Рассчитываем цену за квадратный метр
      let pricePerSqm = 0;
      if (priceValue > 0 && areaValue > 0) {
        pricePerSqm = Math.round(priceValue / areaValue);
      }
      
      // Получаем общее количество объявлений для статистики
      const countElement = document.querySelector('[data-cy="search.listing-panel.label"]');
      const countText = countElement?.textContent?.trim() || '';
      
      const totalArticles = document.querySelectorAll('article').length;
      
      return {
        found: true,
        countText,
        totalArticles,
        title,
        price: {
          text: priceText,
          value: priceValue
        },
        area: {
          text: areaText,
          value: areaValue
        },
        pricePerSqm: {
          text: pricePerSqm > 0 ? `${pricePerSqm} zł/m²` : '',
          value: pricePerSqm
        },
        address,
        url
      };
    });
    
    // 8. Сохраняем скриншот первого объявления для проверки
    if (data.found) {
      // Пытаемся найти и сделать скриншот первого объявления
      const firstArticle = await page.$('article');
      if (firstArticle) {
        const screenshotPath = path.join(RESULTS_DIR, `first_listing_${Date.now()}.png`);
        await firstArticle.screenshot({ path: screenshotPath });
        console.log(`Screenshot of first listing saved to: ${screenshotPath}`);
      }
    }
    
    // 9. Закрываем ресурсы
    await page.close();
    await context.close();
    await browser.close();
    
    // 10. Выводим и сохраняем результаты
    if (data.found) {
      console.log('\n=== EXTRACTED LISTING DATA ===');
      console.log(`Total articles found: ${data.totalArticles}`);
      console.log(`Count text: ${data.countText}`);
      console.log(`Title: ${data.title}`);
      console.log(`Price: ${data.price.text} (${data.price.value})`);
      console.log(`Area: ${data.area.text} (${data.area.value})`);
      console.log(`Price per m²: ${data.pricePerSqm.text}`);
      console.log(`Address: ${data.address}`);
      console.log(`URL: ${data.url}`);
      
      // Сохраняем результаты в JSON
      const resultsFile = path.join(RESULTS_DIR, `extract_one_ad_${Date.now()}.json`);
      fs.writeFileSync(resultsFile, JSON.stringify({
        status: 'success',
        timestamp: new Date().toISOString(),
        url: TARGET_URL,
        extractionTimeMs: Date.now() - startTime,
        data
      }, null, 2));
      
      console.log(`\nResults saved to: ${resultsFile}`);
      console.log('SUCCESS: Data extraction completed successfully!');
    } else {
      console.log('WARNING: No listings found on the page');
      
      // Сохраняем информацию об отсутствии объявлений
      const resultsFile = path.join(RESULTS_DIR, `extract_one_ad_no_listings_${Date.now()}.json`);
      fs.writeFileSync(resultsFile, JSON.stringify({
        status: 'no_listings',
        timestamp: new Date().toISOString(),
        url: TARGET_URL,
        pageTitle: title,
        extractionTimeMs: Date.now() - startTime
      }));
      
      console.log(`Results saved to: ${resultsFile}`);
    }
    
  } catch (error) {
    console.error(`ERROR: ${(error as Error).message}`);
    
    // Сохраняем информацию об ошибке
    const errorFile = path.join(RESULTS_DIR, `extract_one_ad_error_${Date.now()}.json`);
    fs.writeFileSync(errorFile, JSON.stringify({
      status: 'error',
      timestamp: new Date().toISOString(),
      url: TARGET_URL,
      error: (error as Error).message,
      stack: (error as Error).stack,
      extractionTimeMs: Date.now() - startTime
    }));
    
    console.log(`Error information saved to: ${errorFile}`);
  } finally {
    clearTimeout(timeoutId);
    console.log(`Total execution time: ${Date.now() - startTime}ms`);
    console.log('=== EXTRACTION COMPLETED ===');
  }
}

// Запускаем скрапер
extractOneAd()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('Unhandled error:', err);
    process.exit(1);
  });
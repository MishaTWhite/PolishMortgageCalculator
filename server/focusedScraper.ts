/**
 * Focused Scraper
 * 
 * Скрапер, оптимизированный для быстрого извлечения данных об одном конкретном 
 * объявлении на Otodom. Использует прямые ссылки на объявления вместо списков.
 */

import * as fs from 'fs';
import * as path from 'path';
import { chromium, Browser, BrowserContext, Page } from 'playwright';

// Константы
const MAX_RUNTIME = 30000; // 30 секунд максимум
const COOKIES_FILE = './attached_assets/Pasted-1-Cookie-cooki-1745927642029.txt';
// Прямая ссылка на объявление для более быстрой загрузки
const TARGET_URL = 'https://www.otodom.pl/pl/oferta/nowoczesny-apartament-w-srodmiesciu-i-pietro-ID4np3Y';
const RESULTS_DIR = './scraper_results';

// Создаем директорию для результатов, если она не существует
if (!fs.existsSync(RESULTS_DIR)) {
  fs.mkdirSync(RESULTS_DIR, { recursive: true });
}

/**
 * Основная функция скрапера
 */
async function focusedScraper() {
  console.log('=== STARTING FOCUSED SCRAPER ===');
  
  const startTime = Date.now();
  const timeoutId = setTimeout(() => {
    console.log('MAX RUNTIME REACHED! Exiting process...');
    process.exit(1);
  }, MAX_RUNTIME);
  
  let browser: Browser | null = null;
  let context: BrowserContext | null = null;
  let page: Page | null = null;
  
  try {
    // 1. Загружаем данные сессии
    console.log('Loading cookies from file...');
    const sessionData = JSON.parse(fs.readFileSync(COOKIES_FILE, 'utf-8'));
    console.log(`Loaded ${sessionData.cookies.length} cookies`);
    
    // 2. Запускаем браузер с минимальными настройками
    console.log('Launching browser...');
    browser = await chromium.launch({
      headless: true,
      executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',
      args: ['--no-sandbox', '--disable-dev-shm-usage']
    });
    
    // 3. Создаем контекст и устанавливаем куки
    console.log('Creating context and setting cookies...');
    context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
      locale: 'pl-PL'
    });
    await context.addCookies(sessionData.cookies);
    
    // 4. Создаем страницу и устанавливаем localStorage
    console.log('Creating page and setting localStorage...');
    page = await context.newPage();
    
    // Подготавливаем localStorage скрипт
    await page.addInitScript(`() => {
      const storage = ${JSON.stringify(sessionData.localStorage)};
      for (const [key, value] of Object.entries(storage)) {
        if (value) localStorage.setItem(key, value);
      }
    }`);
    
    // 5. Переходим по URL и ждем загрузки страницы
    console.log(`Navigating to ${TARGET_URL}...`);
    const response = await page.goto(TARGET_URL, {
      waitUntil: 'domcontentloaded',
      timeout: 15000
    });
    
    // Быстрая проверка на CloudFront блокировку
    console.log(`Page loaded with status: ${response?.status()}`);
    const title = await page.title();
    console.log(`Page title: ${title}`);
    
    const html = await page.content();
    const isBlocked = html.includes('ERROR: The request could not be satisfied') || 
                      html.includes('Generated by cloudfront');
    
    if (isBlocked) {
      console.log('BLOCKED: CloudFront protection detected!');
      
      // Сохраняем информацию о блокировке
      const resultsFile = path.join(RESULTS_DIR, `focused_scraper_blocked_${Date.now()}.json`);
      fs.writeFileSync(resultsFile, JSON.stringify({
        status: 'blocked',
        url: TARGET_URL,
        timestamp: new Date().toISOString()
      }));
      
      console.log(`Results saved to: ${resultsFile}`);
      return;
    }
    
    // 6. Извлекаем данные о недвижимости
    console.log('Extracting detailed property data...');
    
    // Делаем скриншот для визуальной проверки
    const screenshotPath = path.join(RESULTS_DIR, `focused_screenshot_${Date.now()}.png`);
    await page.screenshot({ path: screenshotPath });
    console.log(`Screenshot saved to: ${screenshotPath}`);
    
    // Сохраняем HTML для детального разбора
    const htmlPath = path.join(RESULTS_DIR, `focused_html_${Date.now()}.html`);
    fs.writeFileSync(htmlPath, html);
    console.log(`HTML saved to: ${htmlPath}`);
    
    // Извлекаем данные из страницы объявления
    const data = await page.evaluate(() => {
      // Вспомогательные функции
      const cleanPrice = (str: string | null | undefined): number => {
        if (!str) return 0;
        const matches = str.match(/[\d\s,.]+/);
        if (!matches) return 0;
        const cleaned = matches[0].replace(/[^\d]/g, '');
        return cleaned ? parseInt(cleaned) : 0;
      };
      
      const cleanArea = (str: string | null | undefined): number => {
        if (!str) return 0;
        const matches = str.match(/[\d,.]+/);
        if (!matches) return 0;
        const cleaned = matches[0].replace(',', '.');
        return cleaned ? parseFloat(cleaned) : 0;
      };
      
      // Пытаемся извлечь различные данные, используя разные селекторы
      // Заголовок объявления
      const titleSelectors = [
        'h1', 
        '[data-cy="adPageAdTitle"]', 
        '.css-1wnihf5'
      ];
      
      let title = '';
      for (const selector of titleSelectors) {
        const element = document.querySelector(selector);
        if (element && element.textContent) {
          title = element.textContent.trim();
          break;
        }
      }
      
      // Цена объявления
      const priceSelectors = [
        '[data-cy="adPageHeaderPrice"]',
        '.css-8qi9av',
        '.css-19p80c0',
        '.css-1vr19r7'
      ];
      
      let priceText = '';
      let priceValue = 0;
      for (const selector of priceSelectors) {
        const element = document.querySelector(selector);
        if (element && element.textContent) {
          priceText = element.textContent.trim();
          priceValue = cleanPrice(priceText);
          if (priceValue > 0) break;
        }
      }
      
      // Адрес объявления
      const addressSelectors = [
        '[data-cy="adPageAdLocation"]',
        '.css-1l2t9ew',
        '.css-1b2u9v8',
        'p[aria-label*="address"]'
      ];
      
      let address = '';
      for (const selector of addressSelectors) {
        const element = document.querySelector(selector);
        if (element && element.textContent) {
          address = element.textContent.trim();
          if (address) break;
        }
      }
      
      // Извлечение информации из таблицы деталей
      const detailsMap: Record<string, string> = {};
      
      // Попытка найти таблицу деталей различными способами
      const detailsTableSelectors = [
        '[data-testid="ad.top-information.table"]',
        '[data-cy="adPageAdInformationDesktop"]',
        '.css-1qzszy5'
      ];
      
      for (const tableSelector of detailsTableSelectors) {
        const table = document.querySelector(tableSelector);
        if (!table) continue;
        
        // Поиск строк таблицы
        const rows = table.querySelectorAll('div[role="row"]');
        if (rows.length === 0) continue;
        
        // Извлечение данных из каждой строки
        rows.forEach(row => {
          const label = row.querySelector('div[role="cell"]:first-child');
          const value = row.querySelector('div[role="cell"]:last-child');
          if (label && value && label.textContent && value.textContent) {
            detailsMap[label.textContent.trim()] = value.textContent.trim();
          }
        });
        
        break; // Если нашли и обработали таблицу, выходим из цикла
      }
      
      // Если первый метод не сработал, пробуем запасной вариант
      if (Object.keys(detailsMap).length === 0) {
        // Альтернативный способ получения деталей через классы
        const detailRows = document.querySelectorAll('.css-1qfvxwr, .css-1gj6jav');
        detailRows.forEach(row => {
          const label = row.querySelector('.css-1ccyb84, .css-1qvli4o');
          const value = row.querySelector('.css-1wi2w6s, .css-1qkvt8k');
          if (label && value && label.textContent && value.textContent) {
            detailsMap[label.textContent.trim()] = value.textContent.trim();
          }
        });
      }
      
      // Извлечение конкретных значений из таблицы деталей
      const possibleAreaLabels = [
        'Powierzchnia', 'Area', 'Powierzchnia całkowita', 'Powierzchnia użytkowa'
      ];
      
      const possibleRoomLabels = [
        'Liczba pokoi', 'Rooms', 'Pokoje'
      ];
      
      let areaText = '';
      let areaValue = 0;
      for (const label of possibleAreaLabels) {
        if (detailsMap[label]) {
          areaText = detailsMap[label];
          areaValue = cleanArea(areaText);
          break;
        }
      }
      
      let rooms = '';
      for (const label of possibleRoomLabels) {
        if (detailsMap[label]) {
          rooms = detailsMap[label];
          break;
        }
      }
      
      // Извлечение изображения
      const imgSelectors = [
        '[data-cy="galleryMainPhoto"] img',
        '.css-7wgo4x img',
        '.css-1vr0z8v img',
        '.css-1bmvmcl img'
      ];
      
      let mainImageUrl = '';
      for (const selector of imgSelectors) {
        const imgElement = document.querySelector(selector) as HTMLImageElement;
        if (imgElement && imgElement.src) {
          mainImageUrl = imgElement.src;
          break;
        }
      }
      
      // Расчет цены за квадратный метр
      let pricePerSqm = 0;
      if (priceValue > 0 && areaValue > 0) {
        pricePerSqm = Math.round(priceValue / areaValue);
      }
      
      // Идентификатор объявления
      const adIdRegex = /ID(\w+)/;
      const adIdMatch = window.location.href.match(adIdRegex);
      const adId = adIdMatch ? adIdMatch[1] : '';
      
      // Возвращаем результат
      return {
        id: adId,
        url: window.location.href,
        title,
        price: {
          text: priceText,
          value: priceValue
        },
        area: {
          text: areaText,
          value: areaValue
        },
        pricePerSqm: {
          text: pricePerSqm > 0 ? `${pricePerSqm} zł/m²` : '',
          value: pricePerSqm
        },
        address,
        rooms,
        details: detailsMap,
        mainImageUrl
      };
    });
    
    // 7. Выводим и сохраняем результаты
    console.log('\n=== EXTRACTED PROPERTY DATA ===');
    console.log(`ID: ${data.id}`);
    console.log(`Title: ${data.title}`);
    console.log(`Price: ${data.price.text} (${data.price.value})`);
    console.log(`Area: ${data.area.text} (${data.area.value})`);
    console.log(`Price per m²: ${data.pricePerSqm.text}`);
    console.log(`Address: ${data.address}`);
    console.log(`Rooms: ${data.rooms}`);
    console.log(`Image URL: ${data.mainImageUrl}`);
    
    // Выводим детали
    console.log('\nProperty Details:');
    for (const [key, value] of Object.entries(data.details)) {
      console.log(`  ${key}: ${value}`);
    }
    
    // Сохраняем результаты в JSON
    const resultsFile = path.join(RESULTS_DIR, `focused_scraper_${Date.now()}.json`);
    fs.writeFileSync(resultsFile, JSON.stringify({
      status: 'success',
      timestamp: new Date().toISOString(),
      url: TARGET_URL,
      extractionTimeMs: Date.now() - startTime,
      data
    }, null, 2));
    
    console.log(`\nResults saved to: ${resultsFile}`);
    console.log('SUCCESS: Data extraction completed successfully!');
    
  } catch (error) {
    console.error(`ERROR: ${(error as Error).message}`);
    
    // Сохраняем информацию об ошибке
    const errorFile = path.join(RESULTS_DIR, `focused_scraper_error_${Date.now()}.json`);
    fs.writeFileSync(errorFile, JSON.stringify({
      status: 'error',
      timestamp: new Date().toISOString(),
      url: TARGET_URL,
      error: (error as Error).message,
      stack: (error as Error).stack,
      extractionTimeMs: Date.now() - startTime
    }));
    
    console.log(`Error information saved to: ${errorFile}`);
  } finally {
    // Закрываем все ресурсы
    try {
      if (page) await page.close();
      if (context) await context.close();
      if (browser) await browser.close();
    } catch (err) {
      console.log('Error during cleanup:', (err as Error).message);
    }
    
    clearTimeout(timeoutId);
    console.log(`Total execution time: ${Date.now() - startTime}ms`);
    console.log('=== EXTRACTION COMPLETED ===');
  }
}

// Запускаем скрапер
focusedScraper()
  .then(() => setTimeout(() => process.exit(0), 500))
  .catch(err => {
    console.error('Unhandled error:', err);
    process.exit(1);
  });
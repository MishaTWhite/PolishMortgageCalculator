/**
 * Micro Test
 * 
 * Минимальная версия теста для быстрой проверки обхода защиты
 * с минимальным количеством кода и максимальной скоростью выполнения.
 */

import * as fs from 'fs';
import * as path from 'path';
import { chromium } from 'playwright';

// Константы
const LOG_DIR = './logs/micro_test';
const COOKIES_FILE = './attached_assets/Pasted-1-Cookie-cooki-1745927642029.txt';

// Создаем директорию для логов
if (!fs.existsSync(LOG_DIR)) {
  fs.mkdirSync(LOG_DIR, { recursive: true });
}

// Функция для логирования
function log(message: string): void {
  console.log(message);
  fs.appendFileSync(path.join(LOG_DIR, 'log.txt'), message + '\n');
}

// Основная функция
async function microTest(): Promise<void> {
  log('=== STARTING MICRO TEST ===');
  
  try {
    // 1. Загружаем cookies
    log('Loading cookies...');
    const fileContent = fs.readFileSync(COOKIES_FILE, 'utf-8');
    const { cookies, localStorage } = JSON.parse(fileContent);
    log(`Loaded ${cookies.length} cookies`);
    
    // 2. Запускаем браузер с минимальными настройками
    log('Launching browser...');
    const browser = await chromium.launch({
      headless: true,
      executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',
      args: ['--no-sandbox', '--disable-dev-shm-usage']
    });
    
    // 3. Создаем контекст
    log('Creating context...');
    const context = await browser.newContext({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
    });
    
    // 4. Устанавливаем cookies
    log('Setting cookies...');
    await context.addCookies(cookies);
    
    // 5. Создаем страницу
    log('Creating page...');
    const page = await context.newPage();
    
    // 6. Переходим на целевую страницу
    const targetUrl = 'https://www.otodom.pl/pl/oferty/sprzedaz/mieszkanie/warszawa/srodmiescie?roomsNumber=%5BTHREE%5D';
    log(`Navigating to ${targetUrl}...`);
    
    // Устанавливаем короткий таймаут
    const response = await page.goto(targetUrl, {
      waitUntil: 'domcontentloaded',
      timeout: 15000
    });
    
    if (response) {
      log(`Page loaded with status: ${response.status()}`);
    }
    
    // 7. Получаем заголовок
    const title = await page.title();
    log(`Page title: ${title}`);
    
    // 8. Делаем скриншот
    log('Taking screenshot...');
    await page.screenshot({ path: path.join(LOG_DIR, 'screenshot.png') });
    
    // 9. Получаем HTML
    log('Getting HTML...');
    const html = await page.content();
    fs.writeFileSync(path.join(LOG_DIR, 'page.html'), html);
    
    // 10. Проверяем на наличие объявлений
    log('Checking for listings...');
    const articlesCount = await page.evaluate(() => {
      return document.querySelectorAll('article').length;
    });
    
    log(`Found ${articlesCount} article elements`);
    
    // 11. Проверяем на наличие блокировки CloudFront
    const isCloudFrontBlock = html.includes('ERROR: The request could not be satisfied') ||
                           html.includes('Generated by cloudfront');
    
    log(`CloudFront blocking detected: ${isCloudFrontBlock}`);
    
    // 12. Закрываем все ресурсы
    await page.close();
    await context.close();
    await browser.close();
    
    // 13. Выводим итог
    log('\n=== TEST RESULT ===');
    log(`Page loaded: ${response?.status() === 200 ? 'YES' : 'NO'}`);
    log(`CloudFront block: ${isCloudFrontBlock ? 'YES' : 'NO'}`);
    log(`Articles found: ${articlesCount}`);
    
    if (response?.status() === 200 && !isCloudFrontBlock && articlesCount > 0) {
      log('VERDICT: SUCCESS - Protection bypassed and listings found!');
    } else if (response?.status() === 200 && !isCloudFrontBlock) {
      log('VERDICT: PARTIAL SUCCESS - Protection bypassed but no listings found');
    } else {
      log('VERDICT: FAILED - Could not bypass protection');
    }
    
  } catch (error) {
    log(`ERROR: ${error.message}`);
  }
  
  log('=== TEST FINISHED ===');
}

// Запускаем тест
microTest().catch(console.error);
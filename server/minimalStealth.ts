// Минимальная версия скрапера с обходом CloudFront
// Использует только самые необходимые техники обхода без пошаговой навигации
import * as fs from 'fs';
import * as path from 'path';
import { chromium, devices } from 'playwright';

/**
 * Минимальная версия скрапера с обходом CloudFront
 * Использует только самые необходимые техники и прямой переход на страницу результатов
 */
async function minimalStealthScraper() {
  console.log('==== MINIMAL STEALTH SCRAPER ====');
  console.log('Starting minimal stealth test...');
  
  let browser = null;
  try {
    // Используем предустановленное устройство для реалистичной эмуляции
    const device = devices['Desktop Chrome'];
    
    // Аргументы запуска с минимальными опциями
    const launchOptions = {
      headless: true,
      executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',
      args: [
        '--no-sandbox',
        '--disable-blink-features=AutomationControlled',
        '--window-size=1366,768'
      ],
      timeout: 20000
    };
    
    console.log('Launching browser...');
    browser = await chromium.launch(launchOptions);
    
    // Создаем контекст, эмулирующий обычный Chrome на десктопе
    const context = await browser.newContext({
      ...device,
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
      locale: 'pl-PL',
      timezoneId: 'Europe/Warsaw',
      // Используем уникальный storage state для каждого запуска
      storageState: {
        cookies: [],
        origins: []
      }
    });
    
    console.log('✓ Browser context created with desktop device emulation');
    
    // Создаем страницу
    const page = await context.newPage();
    
    // Устанавливаем заголовки
    await page.setExtraHTTPHeaders({
      'Accept-Language': 'pl-PL,pl;q=0.9,en-US;q=0.8,en;q=0.7',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
      'sec-ch-ua': '"Chromium";v="124", "Google Chrome";v="124", "Not-A.Brand";v="99"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      'sec-fetch-site': 'same-origin',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-user': '?1',
      'sec-fetch-dest': 'document',
      'upgrade-insecure-requests': '1'
    });
    
    // Базовый обход обнаружения автоматизации
    await page.addInitScript(() => {
      Object.defineProperty(navigator, 'webdriver', { get: () => false });
      Object.defineProperty(navigator, 'languages', { get: () => ['pl-PL', 'pl', 'en-US', 'en'] });
    });
    
    console.log('✓ Page created with anti-detection setup');
    
    // Устанавливаем основные cookies для обхода баннера
    await context.addCookies([
      {
        name: 'OptanonAlertBoxClosed',
        value: new Date().toISOString(),
        domain: '.otodom.pl',
        path: '/',
      }
    ]);
    
    // Сначала посещаем главную страницу
    console.log('First visit to main page to set cookies...');
    await page.goto('https://www.otodom.pl/', { 
      waitUntil: 'domcontentloaded',
      timeout: 15000
    });
    
    // Сохраняем скриншот главной страницы
    await page.screenshot({ path: './logs/minimal_main.png' });
    console.log('✓ Main page loaded and screenshot saved');
    
    // Делаем небольшую паузу и скролл для естественности
    await page.waitForTimeout(1000);
    await page.evaluate(() => {
      window.scrollBy(0, 300);
    });
    await page.waitForTimeout(800);
    
    // Переходим на страницу результатов с рефереров и правильными хедерами
    console.log('Navigating to search results page...');
    
    // Устанавливаем рефереры
    await page.setExtraHTTPHeaders({
      'Referer': 'https://www.otodom.pl/'
    });
    
    // URL с параметрами
    const resultsUrl = 'https://www.otodom.pl/pl/oferty/sprzedaz/mieszkanie/warszawa/srodmiescie?roomsNumber=%5BTHREE%5D';
    
    // Переходим с уменьшенным ожиданием
    await page.goto(resultsUrl, { 
      waitUntil: 'domcontentloaded', 
      timeout: 15000
    });
    
    // Сохраняем скриншот результатов
    await page.screenshot({ path: './logs/minimal_results.png' });
    console.log('✓ Results page loaded and screenshot saved');
    
    // Проверка на наличие блокировки CloudFront
    const pageContent = await page.content();
    const isBlocked = pageContent.includes('ERROR: The request could not be satisfied') || 
                    pageContent.includes('Request blocked') ||
                    pageContent.includes('Generated by cloudfront');
    
    // Сохраняем HTML для анализа
    fs.writeFileSync('./logs/minimal_page.html', pageContent);
    console.log('✓ Page HTML saved for analysis');
    
    if (isBlocked) {
      console.log('❌ BLOCKED: CloudFront still blocking our request!');
    } else {
      console.log('✓ SUCCESS: Page loaded without CloudFront blocking!');
    }
    
    // Извлекаем данные о ценах с минимальным набором селекторов
    console.log('Extracting price data...');
    const data = await page.evaluate(() => {
      // Проверяем блокировку
      if (document.title.includes('ERROR') || document.body.innerText.includes('Request blocked')) {
        return { blocked: true, prices: [] };
      }
      
      // Проверяем, есть ли объявления
      const articles = document.querySelectorAll('article');
      
      // Получаем цены только с основным селектором
      const priceElements = document.querySelectorAll('[data-cy="listing-item-price"]');
      const prices = Array.from(priceElements).map(el => {
        const text = el.textContent || '';
        return text.replace(/[^\d]/g, '');
      });
      
      // Получаем количество объявлений если есть
      const countEl = document.querySelector('[data-cy="search.listing-panel.label"]');
      const count = countEl ? countEl.textContent : null;
      
      return { 
        blocked: false,
        prices,
        articlesCount: articles.length,
        count,
        pageTitle: document.title
      };
    });
    
    console.log('Data extraction results:', data);
    
    // Сохраняем результаты в JSON
    const result = {
      timestamp: new Date().toISOString(),
      url: page.url(),
      isBlocked,
      pricesFound: data.prices ? data.prices.length : 0,
      prices: data.prices || [],
      articlesCount: data.articlesCount || 0,
      countText: data.count || 'Not found',
      pageTitle: data.pageTitle || ''
    };
    
    fs.writeFileSync('./logs/minimal_results.json', JSON.stringify(result, null, 2));
    console.log('✓ Results saved to JSON file');
    
    // Закрываем браузер
    await browser.close();
    console.log('✓ Browser closed');
    console.log('==== TEST COMPLETED SUCCESSFULLY ====');
    
    return result;
  } catch (error) {
    console.error('==== ERROR IN MINIMAL STEALTH TEST ====');
    console.error(error);
    
    try {
      if (browser) await browser.close();
    } catch (e) {
      console.error('Error closing browser:', e);
    }
    
    return { error: String(error) };
  }
}

// Запускаем минимальный скрапер
minimalStealthScraper()
  .then(result => {
    console.log('Minimal stealth scraper completed with result:', result);
    process.exit(0);
  })
  .catch(err => {
    console.error('Unhandled error in minimal stealth scraper:', err);
    process.exit(1);
  });